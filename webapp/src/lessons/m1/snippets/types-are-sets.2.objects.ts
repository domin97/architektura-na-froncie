export {}

interface Human {
  name: string
}
declare let someone: Human

interface Developer extends Human {
  languages: string[]
}
declare let developer: Developer

interface TaxiDriver extends Human {
  drive(): void
}
declare let taxiDriver: TaxiDriver

type DriverDeveloperIntersection = Developer & TaxiDriver




// kompatybilnoÅ›Ä‡

declare let ddIntersection: DriverDeveloperIntersection
ddIntersection = developer
ddIntersection = taxiDriver
// ðŸ¤” dlaczego rzuca bÅ‚Ä…d?
// jakie wyraÅ¼enie speÅ‚niÅ‚oby oczekiwania?

type DriverDeveloperUnion = Developer | TaxiDriver

declare let ddUnion: DriverDeveloperUnion
ddUnion = developer
ddUnion = taxiDriver
// ðŸ¤” a to dlaczego przechodzi?




// jakie pola sÄ… dostÄ™pne na unii?
declare let unionObject: DriverDeveloperUnion
// unionObject.

// a jakie na przeciÄ™ciu?
declare let intersectionObject: DriverDeveloperIntersection
// intersectionObject.



// czÄ™Å›Ä‡ wspÃ³lna jest ROZDZIELNA (distributive) wzglÄ™dem unii

// (A ^ B) v C == to samo

// (A v B) ^ C == A ^ C v B ^ C // rozdzielnoÅ›Ä‡

type Employee = Developer | TaxiDriver
type FlyingEmployee = Employee & { fly(): void }
// (Developer & { fly(): void; }) | (TaxiDriver & { fly(): void; })
