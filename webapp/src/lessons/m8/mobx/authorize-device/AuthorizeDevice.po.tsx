import { render } from "@testing-library/react";

import { unsafe_cast } from "lib/lang";

import { AuthorizeDevicePO } from "lessons/m7/authorize-device/AuthorizeDevice.po";
import { AuthorizeDeviceProcessMobx as AuthorizeDeviceProcess } from "./AuthorizeDeviceProcessMobx";
import { AuthorizeDeviceStore } from "./store/AuthorizeDeviceStore";

/**
 * UWAGA! üî•
 *
 * Dlaczego dziedziczenie Page Objecta?
 * - szkoleniowo tak wygodniej
 * Poni≈ºszy Page Object renderuje komponent nieco inaczej ni≈º oryginalny Page Object (z modu≈Çu o testowaniu integracyjnym).
 * Ten tutaj potrzebuje store MobXowy, musi go r√≥wnie≈º stworzyƒá.
 * Mogliby≈õmy skopiowaƒá ca≈Ço≈õƒá... ale r√≥≈ºni≈Çaby siƒô jedynie metoda render, jak poni≈ºej.
 * W PRAWDZIWEJ APLIKACJI nie mieliby≈õmy potrzeby takiego dziedziczenia, bo implementacja wystarczy jedna.
 */
export class AuthorizeDeviceMobXPO extends AuthorizeDevicePO {
  static render() {
    const onSuccess = jest.fn()
    const onLogout = jest.fn()
    const store = new AuthorizeDeviceStore()

    const { container } = render(<AuthorizeDeviceProcess
      onSuccess={onSuccess}
      onLogout={onLogout}
      store={store}
    />)

    return new AuthorizeDevicePO(unsafe_cast.ElementToHTMLElement(container), onSuccess, onLogout);
  }
}
